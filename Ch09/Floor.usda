#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 500)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (28.953392846344492, 690.3644696172614, 1125.2937607276062)
                double3 target = (-59.35666283000544, -359.86157218176095, -330.6609920066039)
            }
            dictionary Right = {
                double3 position = (-500, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 500, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./Floor.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
        string sourceDirPath = "D:/Andy/Omniverse Projects/DIGITAL BOT LABS/Yizhou_ Book/USDs_created_from_Code/Ch09/"
        string sourceFilename = "Tileable_TEST_02.blend"
    }
    defaultPrim = "World"
    doc = "Blender v4.2.0 Alpha"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def "Viewport_Measure" (
    hide_in_stage_window = true
    no_delete = true
)
{
}

def Xform "World" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    float3 xformOp:rotateXYZ = (-90, -0, 0)
    float3 xformOp:scale = (100, 100, 100)
    uniform token[] xformOpOrder = ["xformOp:rotateXYZ", "xformOp:scale"]

    def Scope "materials"
    {
        def Material "Tile_Pattern"
        {
            token outputs:surface.connect = </World/materials/Tile_Pattern/preview_Principled_BSDF.outputs:surface>
            custom string userProperties:blender:data_name = "Floor_Pattern"

            def Shader "preview_Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:clearcoatRoughness = 0.03 (
                    customData = {
                        float default = 0.01
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                color3f inputs:diffuseColor (
                    customData = {
                        float3 default = (0.18, 0.18, 0.18)
                    }
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuseColor.connect = </World/materials/Tile_Pattern/preview_Image_Texture.outputs:rgb>
                float inputs:ior = 1.45 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    hidden = false
                )
                float inputs:metallic = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float3 inputs:normal (
                    customData = {
                        float3 default = (0, 0, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (-1, -1, -1)
                        }
                    }
                    hidden = false
                )
                float3 inputs:normal.connect = </World/materials/Tile_Pattern/preview_Image_Texture_002.outputs:rgb>
                float inputs:opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:roughness (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:roughness.connect = </World/materials/Tile_Pattern/preview_Image_Texture_001.outputs:r>
                token outputs:surface
            }

            def Shader "preview_Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./Assets/textures/Tile_Pattern_DIFFUSE.png@ (
                    customData = {
                        asset default = @@
                    }
                    hidden = false
                    renderType = "texture_2d"
                )
                token inputs:sourceColorSpace = "sRGB" (
                    customData = {
                        string default = "auto"
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                    renderType = "string"
                )
                float2 inputs:st (
                    customData = {
                        float2 default = (0, 0)
                    }
                    hidden = false
                )
                float2 inputs:st.connect = </World/materials/Tile_Pattern/preview_UV_Map.outputs:result>
                token inputs:wrapS = "repeat" (
                    customData = {
                        token default = "useMetadata"
                    }
                    hidden = false
                    renderType = "wrap_mode"
                    sdrMetadata = {
                        string options = "wrap_clamp:0|wrap_repeat:1|wrap_mirrored_repeat:2|wrap_clip:3"
                    }
                )
                token inputs:wrapT = "repeat" (
                    customData = {
                        token default = "useMetadata"
                    }
                    hidden = false
                    renderType = "wrap_mode"
                    sdrMetadata = {
                        string options = "wrap_clamp:0|wrap_repeat:1|wrap_mirrored_repeat:2|wrap_clip:3"
                    }
                )
                float3 outputs:rgb
            }

            def Shader "preview_UV_Map"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                float2 outputs:result
            }

            def Shader "preview_Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./Assets/textures/Tile_Pattern_ROUGHNESS.png@ (
                    customData = {
                        asset default = @@
                    }
                    hidden = false
                    renderType = "texture_2d"
                )
                token inputs:sourceColorSpace = "sRGB" (
                    customData = {
                        string default = "auto"
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                    renderType = "string"
                )
                float2 inputs:st (
                    customData = {
                        float2 default = (0, 0)
                    }
                    hidden = false
                )
                float2 inputs:st.connect = </World/materials/Tile_Pattern/preview_UV_Map.outputs:result>
                token inputs:wrapS = "repeat" (
                    customData = {
                        token default = "useMetadata"
                    }
                    hidden = false
                    renderType = "wrap_mode"
                    sdrMetadata = {
                        string options = "wrap_clamp:0|wrap_repeat:1|wrap_mirrored_repeat:2|wrap_clip:3"
                    }
                )
                token inputs:wrapT = "repeat" (
                    customData = {
                        token default = "useMetadata"
                    }
                    hidden = false
                    renderType = "wrap_mode"
                    sdrMetadata = {
                        string options = "wrap_clamp:0|wrap_repeat:1|wrap_mirrored_repeat:2|wrap_clip:3"
                    }
                )
                float outputs:r
            }

            def Shader "preview_Image_Texture_002"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./Assets/textures/Tile_Pattern_NORMAL.png@ (
                    customData = {
                        asset default = @@
                    }
                    hidden = false
                    renderType = "texture_2d"
                )
                float4 inputs:scale = (1, 1, 1, 1) (
                    customData = {
                        float4 default = (1, 1, 1, 1)
                    }
                    hidden = false
                )
                token inputs:sourceColorSpace = "sRGB" (
                    customData = {
                        string default = "auto"
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                    renderType = "string"
                )
                float2 inputs:st (
                    customData = {
                        float2 default = (0, 0)
                    }
                    hidden = false
                )
                float2 inputs:st.connect = </World/materials/Tile_Pattern/preview_UV_Map.outputs:result>
                token inputs:wrapS = "repeat" (
                    customData = {
                        token default = "useMetadata"
                    }
                    hidden = false
                    renderType = "wrap_mode"
                    sdrMetadata = {
                        string options = "wrap_clamp:0|wrap_repeat:1|wrap_mirrored_repeat:2|wrap_clip:3"
                    }
                )
                token inputs:wrapT = "repeat" (
                    customData = {
                        token default = "useMetadata"
                    }
                    hidden = false
                    renderType = "wrap_mode"
                    sdrMetadata = {
                        string options = "wrap_clamp:0|wrap_repeat:1|wrap_mirrored_repeat:2|wrap_clip:3"
                    }
                )
                float3 outputs:rgb
            }
        }
    }

    def Xform "Floor"
    {
        custom string userProperties:blender:object_name = "Plane"
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "Floor" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-5, -5, 0), (5, 5, 0)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            rel material:binding = </World/materials/Tile_Pattern>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-5, -5, 0), (5, -5, 0), (-5, 5, 0), (5, 5, 0)]
            bool[] primvars:sharp_face = [1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:st = [(1.9869534e-8, 2), (9.5367426e-8, 7.20004e-15), (2, 7.54979e-8), (2, 2)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            custom string userProperties:blender:data_name = "Plane"
        }
    }
}

