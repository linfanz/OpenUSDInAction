#usda 1.0
(
    doc = """Generated from Composed Stage of root layer D:\\Research\\OpenUSDInAction\\Appendix_C\\Assets\\Cube.usda
"""
)

def Xform "World"
{
    def Mesh "Cube" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
        rel material:binding = </Looks/PreviewSurface> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, -50, 50), (50, -50, 50), (-50, 50, 50), (50, 50, 50), (-50, -50, -50), (50, -50, -50), (-50, 50, -50), (50, 50, -50)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 300, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

def Xform "GroundPlane"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Mesh "CollisionMesh"
    {
        uniform bool doubleSided = 0
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [3, 2, 1, 0]
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
        point3f[] points = [(-2500, 0, -2500), (2500, 0, -2500), (2500, 0, 2500), (-2500, 0, 2500)]
        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
    }

    def Plane "CollisionPlane" (
        apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        uniform token axis = "Y"
        uniform token purpose = "guide"
    }
}

def Scope "Looks"
{
    def Material "PreviewSurface"
    {
        token outputs:displacement.connect = </Looks/PreviewSurface/Shader.outputs:displacement>
        token outputs:surface.connect = </Looks/PreviewSurface/Shader.outputs:surface>

        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:clearcoatRoughness = 0.01 (
                customData = {
                    float default = 0.01
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            color3f inputs:diffuseColor = (0.60229886, 0.17030518, 0.17030518) (
                customData = {
                    float3 default = (0.18, 0.18, 0.18)
                }
                hidden = false
                renderType = "color"
            )
            float inputs:displacement = 0 (
                customData = {
                    float default = 0
                }
                hidden = false
            )
            color3f inputs:emissiveColor = (0, 0, 0) (
                customData = {
                    float3 default = (0, 0, 0)
                }
                hidden = false
                renderType = "color"
            )
            float inputs:ior = 1.5 (
                customData = {
                    float default = 1.5
                    dictionary range = {
                        float max = 3.4028235e38
                        float min = 0
                    }
                    dictionary soft_range = {
                        float max = 5
                        float min = 1
                    }
                }
                hidden = false
            )
            float inputs:metallic = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            normal3f inputs:normal = (0, 0, 1) (
                customData = {
                    float3 default = (0, 0, 1)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (-1, -1, -1)
                    }
                }
                hidden = false
            )
            float inputs:occlusion = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                doc = """This parameter is unused.
"""
                hidden = false
            )
            float inputs:opacity = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:opacityThreshold = 0 (
                connectability = "interfaceOnly"
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:roughness = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            color3f inputs:specularColor = (0, 0, 0) (
                customData = {
                    float3 default = (0, 0, 0)
                }
                hidden = false
                renderType = "color"
            )
            int inputs:useSpecularWorkflow = 0 (
                connectability = "interfaceOnly"
                customData = {
                    int default = 0
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                    string widgetType = "checkBox"
                }
                hidden = false
            )
            token outputs:displacement (
                renderType = "material"
            )
            token outputs:surface (
                renderType = "material"
            )
        }
    }
}

