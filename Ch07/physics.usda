#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 504.32490234375
            }
            dictionary Perspective = {
                double3 position = (363.4643706828661, 681.0856102385351, 663.0456877827451)
                double3 target = (-929.129157164673, -742.1617639701915, -1177.6866443021972)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./physics.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    doc = """Generated from Composed Stage of root layer 


Generated from Composed Stage of root layer D:\\Andy\\Omniverse Projects\\DIGITAL BOT LABS\\Yizhou_ Book\\USDs_created_from_Code\\Ch07\\Ground_TEST.usda
"""
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Y"
)

def Xform "World"
{
    def Xform "GroundPlane" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = None (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [3, 2, 1, 0]
            rel material:binding = </World/Looks/Ground> (
                bindMaterialAs = "weakerThanDescendants"
            )
            normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
            point3f[] points = [(-2500, 0, -2500), (2500, 0, -2500), (2500, 0, 2500), (-2500, 0, 2500)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
        }

        def Plane "CollisionPlane" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Y"
            uniform token purpose = "guide"
        }
    }

    def "Sphere" (
        prepend payload = @./Assets/Sphere.usd@
    )
    {
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "materials" (
            active = false
        )
        {
        }

        over "Sphere_mesh" (
            delete apiSchemas = ["PhysicsRigidBodyAPI"]
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(100.00954, -19899, -20200), (20099.996, 100.99345, -200)]
            rel material:binding = </World/Looks/Chequered> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (100, 100, 100)
            double3 xformOp:translate = (100, 100, 101)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def "Cube" (
        prepend payload = @./Assets/Cube.usd@
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "Cube_mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-40300, -9899, -20100), (-20300, 10101, -100)]
            rel material:binding = </World/Looks/Chequered> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:scale = (100, 100, 100)
            double3 xformOp:translate = (-300, 0, 101)
        }
    }

    def Scope "Looks"
    {
        def Material "Chequered"
        {
            token outputs:surface.connect = </World/Looks/Chequered/preview_Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Chequered"

            def Shader "preview_Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:clearcoatRoughness = 0.03 (
                    customData = {
                        float default = 0.01
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                color3f inputs:diffuseColor (
                    customData = {
                        float3 default = (0.18, 0.18, 0.18)
                    }
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuseColor.connect = </World/Looks/Chequered/preview_Image_Texture.outputs:rgb>
                float inputs:ior = 1.5 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    hidden = false
                )
                float inputs:metallic = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:roughness = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                token outputs:surface
            }

            def Shader "preview_Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./Assets/textures/Chequered_DIFFUSE.png@ (
                    customData = {
                        asset default = @@
                    }
                    hidden = false
                    renderType = "texture_2d"
                )
                token inputs:sourceColorSpace = "sRGB" (
                    customData = {
                        string default = "auto"
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                    renderType = "string"
                )
                float2 inputs:st (
                    customData = {
                        float2 default = (0, 0)
                    }
                    hidden = false
                )
                float2 inputs:st.connect = </World/Looks/Chequered/preview_uvmap.outputs:result>
                token inputs:wrapS = "repeat" (
                    customData = {
                        token default = "useMetadata"
                    }
                    hidden = false
                    renderType = "wrap_mode"
                    sdrMetadata = {
                        string options = "wrap_clamp:0|wrap_repeat:1|wrap_mirrored_repeat:2|wrap_clip:3"
                    }
                )
                token inputs:wrapT = "repeat" (
                    customData = {
                        token default = "useMetadata"
                    }
                    hidden = false
                    renderType = "wrap_mode"
                    sdrMetadata = {
                        string options = "wrap_clamp:0|wrap_repeat:1|wrap_mirrored_repeat:2|wrap_clip:3"
                    }
                )
                float3 outputs:rgb
            }

            def Shader "preview_uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                float2 outputs:result
            }
        }

        def Material "Ground"
        {
            token outputs:displacement.connect = </World/Looks/Ground/Shader.outputs:displacement>
            token outputs:surface.connect = </World/Looks/Ground/Shader.outputs:surface>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:clearcoatRoughness = 0.01 (
                    customData = {
                        float default = 0.01
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                color3f inputs:diffuseColor = (0.2162162, 0.21621405, 0.21621405) (
                    customData = {
                        float3 default = (0.18, 0.18, 0.18)
                    }
                    hidden = false
                    renderType = "color"
                )
                float inputs:displacement = 0 (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                )
                color3f inputs:emissiveColor = (0, 0, 0) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                float inputs:ior = 1.5 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    hidden = false
                )
                float inputs:metallic = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                normal3f inputs:normal = (0, 0, 1) (
                    customData = {
                        float3 default = (0, 0, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (-1, -1, -1)
                        }
                    }
                    hidden = false
                )
                float inputs:occlusion = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                )
                float inputs:opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:opacityThreshold = 0 (
                    connectability = "interfaceOnly"
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:roughness = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                color3f inputs:specularColor = (0, 0, 0) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                int inputs:useSpecularWorkflow = 0 (
                    connectability = "interfaceOnly"
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                        string widgetType = "checkBox"
                    }
                    hidden = false
                )
                token outputs:displacement (
                    renderType = "material"
                )
                token outputs:surface (
                    renderType = "material"
                )
            }
        }
    }

    def Scope "Lights"
    {
        def RectLight "RectLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            float3[] extent = [(-50, -50, -0), (50, 50, 0)]
            float inputs:height = 500
            float inputs:intensity = 30000
            float inputs:shaping:cone:angle = 180
            float inputs:shaping:cone:softness
            float inputs:shaping:focus
            color3f inputs:shaping:focusTint
            asset inputs:shaping:ies:file
            float inputs:width = 500
            double3 xformOp:rotateXYZ = (-45, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (100, 1000, 500)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def DiskLight "DiskLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            float3[] extent = [(-50, -50, -0), (50, 50, 0)]
            float inputs:intensity = 100000
            float inputs:radius = 100
            float inputs:shaping:cone:angle = 180
            float inputs:shaping:cone:softness
            float inputs:shaping:focus
            color3f inputs:shaping:focusTint
            asset inputs:shaping:ies:file
            double3 xformOp:rotateXYZ = (-140, 35, 30)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1000, 700, -1000)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }
}

